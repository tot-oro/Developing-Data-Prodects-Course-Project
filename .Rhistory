xpathSApply(parsedHtml, "//title", xmlValue)
xpathSApply(parsedHtml, "//td[@id='col-citedby']", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd")
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle-google, path="/")
pg1 = GET(handle=google, path="/")
pg1
swirl
swirl()
swirl()
library(swirl)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
temp
mean(x)
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
data <- data.frame(id=c(1,2,3,4,5), bp1=c(140,138,150,148,135), bp2=c(132,135,151,146,130))
data
t.test(bp1,bp2,data=data, paired=TRUE)
t.test(data$bp1,data$bp2,paired=TRUE)
x <- as.matrix(c(1,1,1,0), c(0,0,0,1))
x
x <- as.matrix(c(1,1,1,0) c(0,0,0,1))
x <- as.matrix(c(c(1,1,1,0),c(0,0,0,1)))
x
x <- cbind(c(1,1,1,0),c(0,0,0,1))
x
fisher.test(x, alternative = "greater")
x <- c(1,1,1,0)
y <- c(0,0,0,1)
fisher.test(x, y, alternative = "greater")
choose(4,3) * 0.5^4 + choose(4,1) * 0.5^4
?pbinom
pbinom(2, size=4, prob=0.5, lower.tail=FALSE)
pbinom(9, size=1787, prob=0.1, lower.tail=TRUE)
ppois(10, 17.87, lower.tail=TRUE)
s <- sqrt((8*1.5^2+8*1.8^2)/(9+9-2))
t <- -4/(s/sqrt(1/9+1/9))
t
?pt
pt(t, 16, lower.tail=FALSE)
pt(t, 16, lower.tail=TRUE)
pt(t, 16, lower.tail=TRUE)*2
qt(0.975, 8)
t <- -4/(s*sqrt(1/9+1/9))
t
pt(t, 16, lower.tail=TRUE)*2
qt(0.95, 8)
23*3/1.86
(1100-1078)/(37.1/3)
pnorm(2.5, lower.tail=TRUE)
alpha=0.5
z = qnorm(1-alpha)
pnorm(z * 0.01/sqrt(100), mean=0.01, sd=0.01/(sqrt(100)), lower.tail=FALSE)
pnorm(z * 0.04/sqrt(100), mean=0.01, sd=0.04/(sqrt(100)), lower.tail=FALSE)
alpha=0.05
pnorm(z * 0.04/sqrt(100), mean=0.01, sd=0.04/(sqrt(100)), lower.tail=FALSE)
z = qnorm(1-alpha)
pnorm(z * 0.04/sqrt(100), mean=0.01, sd=0.04/(sqrt(100)), lower.tail=FALSE)
z
qnorm(0.1)
2.92*4
11.68^2
library(MASS)
>shuttle
?shuttle
table(shuttle$use)
shuttle$use2[shuttle$use=='auto', ] <- 1
shuttle$use2[shuttle$use=='auto'] <- 1
shuttle$use2[shuttle$use=='noauto'] <- 0
table(shuttle$use2)
log <- glm(shuttle$use2 ~ shuttle$wind, family="binomial")
summary(log)
1/0.03181
library(dplyr)
arrange(shuttle, desc(use2), wind)
log <- glm(shuttle$use2 ~ shuttle$wind, family="binomial")
summary(log)
exp(log$coeff)
1/1.032323
log2 <- glm(shuttle$use2 ~ shuttle$wind + shuttle$magn, family="binomial")
summary(log2)
exp(log2$coeff)
1/1.0325265
mutate(shuttle, use3=1-use2)
log3 <- glm(shuttle$use3 ~ shuttle$wind, family="binomial")
class(shuttle$use2)
class(shuttle$use3)
shuttle$use3[shuttle$use=='auto'] <- 0; shuttle$use3[shuttle$use=='noauto'] <- 1
log3 <- glm(shuttle$use3 ~ shuttle$wind, family="binomial")
summary(log3)
summary(log)
?InsectSprays
fit <- lm(I(log(count))~spray, data=InsectSprays)
fit <- glm(count~spray, data=InsectSprays, family="poisson")
summary(fit)
exp(fit$coeff)
1/1.0574713
?glm
dim(InsectSprays)
for (i in 0:17) {for (j in 1:4) InsectSprays$t[j+i*4] <- j}
View(InsectSprays)
fit2 <- glm(count~spray+offset(t), data=InsectSprays, family="poisson")
fit3 <- glm(count~spray+offset(log(10)+t), data=InsectSprays, family="poisson")
summary(fit2)
summary(fit3)
x <- -5:5;
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
for (x<=0) {z=0}
z <- x
z[z<=0] <-0
z
lm(y~x+z)
mtcars$auto = (mtcars$am == 0)
mtcars$manual = (mtcars$am == 1)
View(mtcars)
lm(mpg~., data=mtcars)
View(mtcars)
install.packages("devtolls")
library(ggplot2)
library(dplyr)
setwd("/Users/vivi/Dropbox/DataScience/Developing-Data-Products/Developing-Data-Prodects-Course-Project")
## Load the iMDB movie data
data("movies")
## Preliminary Data Exploration
summary(movies)
table(movies$year)
View(movies)
MData = movies %>%
filter(year<=2004, year>=1985) %>%
select(1:5, "mpaa":"Short")
# Restrict analysis to 1985-2004 data
MData = movies %>%
filter(year<=2004, year>=1985) %>%
select(1:5, 17:24)
MData2 = reshape(MData, timevar="Genre",
varying=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
v.names="Genre_flg",
times=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
new.row.names=1:1000, direction = "long")
MData2 = reshape(MData, timevar="Genre",
varying=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
v.names="Genre_flg",
times=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
direction = "long")
View(MData2)
MData2 = unique(reshape(MData, timevar="Genre",
varying=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
v.names="Genre_flg",
times=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
direction = "long"))
View(MData2)
duplicated(MData2)
View(MData)
View(MData2)
MData2 = reshape(MData, timevar="Genre",
varying=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
idvar="title"
v.names="Genre_flg",
times=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
direction = "long")
MData2 = reshape(MData, timevar="Genre",
varying=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
idvar="title",
v.names="Genre_flg",
times=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
direction = "long")
MData2 = reshape(MData, timevar="Genre",
varying=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
v.names="Genre_flg",
times=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
direction = "long")
MData2 = MData2[,1:8]
duplicated(MData2)
View(MData2)
MData2[MData2$title="'15'",]
MData2[MData2$title=="'15'",]
MData2 = reshape(MData, timevar="Genre",
varying=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
v.names="Genre_flg",
times=c("Action", "Animation", "Comedy", "Drama", "Documentary",
"Romance", "Short"),
direction = "long")
MData2 = MData2 %>%
filter(Genre_flg=1)
MData2 = MData2 %>%
filter(Genre_flg==1)
test = MData2 %>%
group_by(year)%>%
summarise(total=length(unique(title)))
View(test)
groupByYear = function(dt, minYear, maxYear, genre, mprate) {
result = dt %>%
filter(year >= minYear, year <= maxYear,
Genre %in% genre, mpaa %in% mprate)
return(result)
}
groupByYearAgg = function(dt, minYear, maxYear, genre, mprate) {
dt = groupByYear(dt,minYear, maxYear, genre, mprate)
result = dt %>%
group_by(year) %>%
summarise(Total = length(unique(title))) %>%
arrange(year)
return(result)
}
test = groupByYearAgg(MData2, 1985, 2004, genre, mprate)
genre = sort(unique(MData2$Genre))
# Get unique MPAA rating
mprate = sort(unique(MData2$mpaa))
test = groupByYearAgg(MData2, 1985, 2004, genre, mprate)
View(test)
groupByYearPlot = function(dt, minYear, maxYear, genre, mprate) {
dt1 = groupByYearAgg(dt, minYear, maxYear, genre, mprate)
totalByYear = nPlot(Total ~ year, dt1, type = "multiBarChart",
width = 650)
totalByYear$yAxis(axisLabel = "Number of Movies")
totalByYear$xAxis(axisLabel = "Year")
totalByYear
}
groupByYearPlot(MData2, 1985, 2004, genre, mprate)
require(rCharts)
groupByYearPlot(MData2, 1985, 2004, genre, mprate)
groupByYearPlot = function(dt, minYear, maxYear, genre, mprate) {
dt = groupByYearAgg(dt, minYear, maxYear, genre, mprate)
totalByYear = nPlot(Total ~ year, dt1, type = "multiBarChart",
width = 650)
totalByYear$yAxis(axisLabel = "Number of Movies")
totalByYear$xAxis(axisLabel = "Year")
totalByYear
}
groupByYearPlot(MData2, 1985, 2004, genre, mprate)
groupByYearPlot = function(dt, minYear, maxYear, genre, mprate) {
dt = groupByYearAgg(dt, minYear, maxYear, genre, mprate)
totalByYear = nPlot(Total ~ year, dt, type = "multiBarChart",
width = 650)
totalByYear$yAxis(axisLabel = "Number of Movies")
totalByYear$xAxis(axisLabel = "Year")
totalByYear
}
groupByYearPlot(MData2, 1985, 2004, genre, mprate)
shiny::runApp()
shiny::runApp()
View(MData2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
MData2$mpaa = as.factor(MData2$mpaa)
shiny::runApp()
>nPlot
?nPlot
??nPlot
shiny::runApp()
shiny::runApp()
mprate = sort(unique(MData2$mpaa))
MData2$mpaa = as.character(MData2$mpaa)
mprate = sort(unique(MData2$mpaa))
shiny::runApp()
groupByYear = function(dt, minYear, maxYear, genre, mprate) {
result = dt %>%
filter(year >= minYear, year <= maxYear,
Genre %in% genre, mpaa %in% mprate)
return(result)
}
groupByYearAgg = function(dt, minYear, maxYear, genre, mprate) {
dt = groupByYear(dt,minYear, maxYear, genre, mprate)
result = dt %>%
group_by(year) %>%
summarise(Total = length(unique(title))) %>%
arrange(year)
return(result)
}
groupByYearPlot = function(dt) {
totalByYear = nPlot(Total ~ year, dt, type = "multiBarChart",
width = 650)
totalByYear$chart(margin = list(left = 100))
totalByYear$yAxis(axisLabel = "Number of Movies")
totalByYear$xAxis(axisLabel = "Year")
totalByYear
}
test = groupByYearAgg(MData2, 1985,2004, genre, mprate)
groupByYearPlot(test)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(displayMode = 'showcase')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
genres = sort(unique(MData2$Genre))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(devtools)
devtolls::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='tot-oro', token='349785F03A82BB6E2CD9036813AFDC8C', secret='qpAGN7i77/BpE8COhhQGZ9ECKAlJW8PwxsNsl2fI')
shiny::runApp()
shiny::runApp()
names(MData2)[1] = c("MovieTitle")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
groupByYearPlot = function(dt) {
totalByYear = nPlot(Total ~ year, data = dt, type = "multiBarChart",
width = 650)
totalByYear$chart(margin = list(left = 100))
totalByYear$yAxis(axisLabel = "Number of Movies")
totalByYear$xAxis(axisLabel = "Year")
totalByYear
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
}
groupByYear = function(dt, minYear, maxYear, genres, mprate) {
result = dt %>%
filter(year >= minYear, year <= maxYear,
Genre %in% genres, mpaa %in% mprate)
return(result)
}
groupByYearAgg = function(dt, minYear, maxYear, genres, mprate) {
dt = groupByYear(dt,minYear, maxYear, genres, mprate)
result = dt %>%
group_by(year) %>%
summarise(Total = n()) %>%
arrange(year)
return(result)
}
groupByYearPlot = function(dt, dom="totalByYear") {
totalByYear = nPlot(Total ~ year, data = dt, type = "multiBarChart",
dom = dom)
#totalByYear$chart(margin = list(left = 100))
totalByYear$yAxis(axisLabel = "Number of Movies")
totalByYear$xAxis(axisLabel = "Year")
return(totalByYear)
}
testdata = groupByYearAgg(MData2, 1985, 2004, genres, mprate)
testchart = groupByYearPlot(testdata)
testchart
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(test)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(groupByYearPlot)
View(groupByYearPlot)
View(groupByYearPlot)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderChart
?renderImage
?renderChart2
??renderChart2
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
groupByYearPlot = function(dt) {
#totalByYear = rPlot(Total ~ year | year, data = dt, type = "point",
# dom = dom)
#totalByYear$chart(margin = list(left = 100))
#totalByYear$yAxis(axisLabel = "Number of Movies")
#totalByYear$xAxis(axisLabel = "Year")
totalByYear = gvisColumnChart(dt, "year", "Total")
return(totalByYear)
}
groupByYearPlot(test)
shiny::runApp()
shiny::runApp()
groupByYearPlot = function(dt) {
#totalByYear = rPlot(Total ~ year | year, data = dt, type = "point",
# dom = dom)
#totalByYear$chart(margin = list(left = 100))
#totalByYear$yAxis(axisLabel = "Number of Movies")
#totalByYear$xAxis(axisLabel = "Year")
totalByYear = gvisColumnChart(dt, "year", "Total", options = list(width = 400, height = 450))
return(totalByYear)
}
groupByYearPlot(test)
testchart = groupByYearPlot(test)
print(testchart)
print(testchart, "Chart")
print(testchart, "chart")
library(googleVis)
testchart = groupByYearPlot(test)
print(testchart, "chart")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("rjson")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
